/*
 * generated by Xtext
 */
package de.fhb.mdsd.generator

import de.fhb.mdsd.mobile.Activity
import de.fhb.mdsd.mobile.App
import de.fhb.mdsd.mobile.Button
import de.fhb.mdsd.mobile.CheckBoxPreference
import de.fhb.mdsd.mobile.CustomFragment
import de.fhb.mdsd.mobile.EditTextPreference
import de.fhb.mdsd.mobile.Entries
import de.fhb.mdsd.mobile.ListFragment
import de.fhb.mdsd.mobile.ListPreference
import de.fhb.mdsd.mobile.Menu
import de.fhb.mdsd.mobile.PreferenceActivity
import de.fhb.mdsd.mobile.PreferenceCategory
import de.fhb.mdsd.mobile.Row
import de.fhb.mdsd.mobile.SwitchPreference
import de.fhb.mdsd.mobile.Tab
import de.fhb.mdsd.mobile.TextField
import de.fhb.mdsd.mobile.TextView
import de.fhb.mdsd.mobile.View
import org.eclipse.emf.common.util.EList
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator

class MobileGenerator implements IGenerator {
	
  	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
    	fsa.generateFile("../AndroidManifest.xml", resource.compileManifest);
    	fsa.generateFile("../res/values/styles.xml", resource.allContents.filter(typeof(App)).head.compileStyles)
    	
    	for (a : resource.allContents.toIterable.filter(typeof(Activity))) {
    		/*
	    	 * Für jede Activity wird eine JAVA-Klasse generiert
	    	 */
      		fsa.generateFile(resource.allContents.filter(typeof(App)).head.packageName.replace(".", "/") + "/" + a.name.toLowerCase.toFirstUpper + "Activity.java", a.compileActivity)
      		fsa.generateFile("../res/layout/activity_" + a.name.toLowerCase + ".xml", a.compileLayout)
      		if (a.navigation != null && a.navigation.elements.size > 0) {
	      		for (t : a.navigation.elements.filter(typeof(Tab))) {
					if (t.frag instanceof CustomFragment) {
						fsa.generateFile(resource.allContents.filter(typeof(App)).head.packageName.replace(".", "/") + "/" + (t.frag as CustomFragment).name.toLowerCase.toFirstUpper + "Fragment.java", compileCustomFragment(t.frag as CustomFragment, resource.allContents.filter(typeof(App)).head.packageName))
						fsa.generateFile("../res/layout/fragment_" + t.frag.name.toLowerCase + ".xml", (t.frag as CustomFragment).view.compileView)
					}
					if (t.frag instanceof ListFragment) {
						fsa.generateFile(resource.allContents.filter(typeof(App)).head.packageName.replace(".", "/") + "/" + (t.frag as ListFragment).name.toLowerCase.toFirstUpper + "Fragment.java", compileListFragment(t.frag as ListFragment, resource.allContents.filter(typeof(App)).head.packageName))
					}
				}
				for (r : a.navigation.elements.filter(typeof(Row))) {
					if (r.frag instanceof CustomFragment) {
						fsa.generateFile(resource.allContents.filter(typeof(App)).head.packageName.replace(".", "/") + "/" + (r.frag as CustomFragment).name.toLowerCase.toFirstUpper + "Fragment.java", compileCustomFragment(r.frag as CustomFragment, resource.allContents.filter(typeof(App)).head.packageName))
						fsa.generateFile("../res/layout/fragment_" + r.frag.name.toLowerCase + ".xml", (r.frag as CustomFragment).view.compileView)
					}
					if (r.frag instanceof ListFragment) {
						fsa.generateFile(resource.allContents.filter(typeof(App)).head.packageName.replace(".", "/") + "/" + (r.frag as ListFragment).name.toLowerCase.toFirstUpper + "Fragment.java", compileListFragment(r.frag as ListFragment, resource.allContents.filter(typeof(App)).head.packageName))
					}
				}
			}
      		if (a.menu != null) {
      			fsa.generateFile("../res/menu/menu_" + a.name.toLowerCase + ".xml", a.menu.compileMenu)
      		}
    	}
    	
    	if (resource.allContents.filter(typeof(PreferenceActivity)).head != null) {
    		fsa.generateFile(resource.allContents.filter(typeof(App)).head.packageName.replace(".", "/") + "/SettingsActivity.java", resource.allContents.filter(typeof(PreferenceActivity)).head.compilePreferenceActivity)
    		fsa.generateFile("../res/xml/preferences.xml", resource.allContents.filter(typeof(PreferenceActivity)).head.categories.compilePreferences)
    	}
    	
    	if (resource.allContents.filter(typeof(Entries)) != null) {
    		fsa.generateFile("../res/values/arrays.xml", compileArrays(resource.allContents.toIterable.filter(typeof(Entries))))
    	}
    }
	
	/*
	 * Generiert den das Android-Manifest
	 */
  	def compileManifest(Resource resource) '''
		<?xml version="1.0" encoding="utf-8"?>
		<manifest xmlns:android="http://schemas.android.com/apk/res/android"
			package="«resource.allContents.filter(typeof(App)).head.packageName»"
			android:versionCode="1"
			android:versionName="1.0" >
		
			<uses-sdk
				android:minSdkVersion="14"
				android:targetSdkVersion="17" />

			<application
				android:allowBackup="true"
				android:icon="@drawable/ic_launcher"
				android:label="«IF resource.allContents.filter(typeof(App)).head.name != null»«resource.allContents.filter(typeof(App)).head.name»«ELSE»@string/app_name«ENDIF»"
				android:theme="@style/AppTheme"
				«IF resource.allContents.filter(typeof(App)).head.bottomBar.equals("true")»
				android:uiOptions="splitActionBarWhenNarrow"
				«ENDIF» >
				«FOR a : resource.allContents.toIterable.filter(typeof(Activity))»
				<activity android:name="«a.name.toFirstUpper»Activity" >
					«IF a.main != null»
					<intent-filter>
						<action android:name="android.intent.action.MAIN" />
						<category android:name="android.intent.category.LAUNCHER" />
					</intent-filter>
					«ENDIF»
				</activity>
				«ENDFOR»
				«IF resource.allContents.filter(typeof(PreferenceActivity)).head != null»
				<activity
					android:name=".SettingsActivity" >
					<intent-filter>
						<category android:name="android.intent.category.PREFERENCE" />
					</intent-filter>
				</activity>
	        	«ENDIF»
			</application>

		</manifest>
  	'''

	/*
	 * Generiert eine XML-Datei mit den Design-Angaben
	 */
	def compileStyles(App app) '''
		<resources>
			
			«IF app.design.equals("light")»
			<style name="AppTheme" parent="android:Theme.Holo.Light" />
			«ELSEIF app.design.equals("dark")»
			<style name="AppTheme" parent="android:Theme.Holo" />
			«ELSEIF app.design.equals("lightWithDarkActionBar")»
			<style name="AppTheme" parent="android:Theme.Holo.Light.DarkActionBar" />
			«ENDIF»
		
		</resources>
	'''
  	
  	/*
  	 * Erstellt den Java-Code für eine Activity
  	 */  
	def compileActivity(Activity a) '''
		«IF a.eContainer != null»
		package «a.eContainer.eAllContents.toIterable.filter(typeof(App)).head.packageName»;
		«ENDIF»
		
		import android.app.ActionBar;
		import android.app.FragmentTransaction;
		import android.content.Intent;
		import android.os.Bundle;
		import android.os.Handler;
		import android.support.v4.app.Fragment;
		import android.support.v4.app.FragmentActivity;
		import android.support.v4.app.FragmentManager;
		import android.support.v4.app.FragmentPagerAdapter;
		import android.support.v4.view.ViewPager;
		import android.view.LayoutInflater;
		import android.view.Menu;
		import android.view.MenuItem;
		import android.view.View;
		import android.view.ViewGroup;
		import android.widget.ArrayAdapter;
		
		public class «a.name»Activity extends FragmentActivity «IF a.navigation != null»«IF a.navigation.elements.filter(typeof(Tab)).size > 0»implements ActionBar.TabListener «ELSEIF a.navigation.elements.filter(typeof(Row)).size > 0»implements ActionBar.OnNavigationListener «ENDIF»«ENDIF»{
			
			«IF a.navigation != null && a.navigation.elements.filter(typeof(Tab)).size > 0»
			PagerAdapter mPagerAdapter;
			
			ViewPager mViewPager;
			
			«ENDIF»
			@Override
			protected void onCreate(Bundle savedInstanceState) {
				super.onCreate(savedInstanceState);
				setContentView(R.layout.activity_«a.name.toLowerCase»);
				
				final ActionBar actionBar = getActionBar();
				«IF a.navigation != null && a.navigation.elements.filter(typeof(Row)).size > 0»
				actionBar.setDisplayShowTitleEnabled(false);
				«ENDIF»
				«IF a.navigation != null && a.navigation.elements.filter(typeof(Tab)).size > 0»
				actionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_TABS);
				
				mPagerAdapter = new PagerAdapter(getSupportFragmentManager());
				
				mViewPager = (ViewPager) findViewById(R.id.pager);
				mViewPager.setAdapter(mPagerAdapter);

				mViewPager.setOnPageChangeListener(new ViewPager.SimpleOnPageChangeListener() {
					@Override
					public void onPageSelected(int position) {
						actionBar.setSelectedNavigationItem(position);
					}
				});
				
				«FOR t : a.navigation.elements.filter(typeof(Tab))»
				actionBar.addTab(actionBar.newTab().setText("«t.text.toUpperCase»").setTabListener(this));
				«ENDFOR»
				«FOR t : a.navigation.elements.filter(typeof(Tab))»
				«IF t.selected != null»
				actionBar.setSelectedNavigationItem(«a.navigation.elements.indexOf(t)»);
				«ENDIF»
				«ENDFOR»
				«ELSEIF a.navigation != null && a.navigation.elements.filter(typeof(Row)).size > 0»
				actionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_LIST);
				
				actionBar.setListNavigationCallbacks(
					new ArrayAdapter<String>(
						actionBar.getThemedContext(),
						android.R.layout.simple_list_item_1, android.R.id.text1,
						new String[] {
							«FOR r : a.navigation.elements.filter(typeof(Row))»
							"«r.text.toFirstUpper»",
							«ENDFOR»
						}),
					this);
				«FOR r : a.navigation.elements.filter(typeof(Row))»
				«IF r.selected != null»
				actionBar.setSelectedNavigationItem(«a.navigation.elements.indexOf(r)»);
				«ENDIF»
				«ENDFOR»
				«ENDIF»
			}
			
			«IF a.menu != null»
			@Override
			public boolean onCreateOptionsMenu(Menu menu) {
				getMenuInflater().inflate(R.menu.menu_«a.name.toLowerCase», menu);
				«FOR menuItem : a.menu.menuItems»
				«IF menuItem.refreshView != null»
				final MenuItem refresh = (MenuItem) menu.findItem(R.id.menu_refresh);
				refresh.setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener() {
					public boolean onMenuItemClick(MenuItem item) {
						new Handler().postDelayed(new Runnable() {
							public void run() {
								refresh.setActionView(null);
							}
						}, 1000);
						return false;
					}
				});
				«ENDIF»
				«ENDFOR»
				return true;
			}
			
			 @Override
			 public boolean onOptionsItemSelected(MenuItem item) {
			 	switch (item.getItemId()) {
			 		case android.R.id.home:
			 			return false;
			 		«FOR menuItem : a.menu.menuItems»
			 		case R.id.menu_«menuItem.id»:
			 			«IF menuItem.refreshView != null»
			 			item.setActionView(R.layout.indeterminate_progress_action);
			 			«ELSEIF menuItem.settings != null»
			 			Intent intent = new Intent(this, SettingsActivity.class);
			 			intent.putExtra(SettingsActivity.EXTRA_PARENT, this.getClass().getName());
			 			startActivity(intent);
			 			«ENDIF»
			 			return true;
			 		«ENDFOR»
			 		default:
			 			return super.onOptionsItemSelected(item);
			 	}
			 }
			«ENDIF»
			
			«IF a.navigation != null && a.navigation.elements.filter(typeof(Tab)).size > 0»
			@Override
			public void onTabUnselected(ActionBar.Tab tab, FragmentTransaction ft) {
			}
			
			@Override
			public void onTabSelected(ActionBar.Tab tab, FragmentTransaction ft) {
				mViewPager.setCurrentItem(tab.getPosition());
			}
			
			@Override
			public void onTabReselected(ActionBar.Tab tab, FragmentTransaction ft) {
			}
			
			public class PagerAdapter extends FragmentPagerAdapter {
				
				public PagerAdapter(FragmentManager fm) {
					super(fm);
				}
				
				@Override
				public Fragment getItem(int position) {
					Fragment fragment = new Fragment();
					switch (position) {
					«FOR t : a.navigation.elements.filter(typeof(Tab))»
					case «a.navigation.elements.indexOf(t)»:
						«IF t.frag != null»
						fragment = new «t.frag.name.toLowerCase.toFirstUpper»Fragment();
						«IF t.frag instanceof CustomFragment»
						Bundle args = new Bundle();
						args.putString(SectionFragment.ARG_LAYOUT, "fragment_«t.frag.name.toLowerCase»");
						fragment.setArguments(args);
						«ENDIF»
						«ENDIF»
						return fragment;
					«ENDFOR»
					default:
						return null;
					}
				}

				@Override
				public int getCount() {
					return «a.navigation.elements.size»;
				}
				
				@Override
				public CharSequence getPageTitle(int position) {
					return getActionBar().getTabAt(position).getText().toString().toUpperCase();
				}
			}
			
			«ELSEIF a.navigation != null && a.navigation.elements.filter(typeof(Row)).size > 0»
			@Override
			public boolean onNavigationItemSelected(int position, long id) {
				Fragment fragment = new Fragment();
				switch (position) {
				«FOR r : a.navigation.elements.filter(typeof(Row))»
				case «a.navigation.elements.indexOf(r)»:
					«IF r.frag != null»
					fragment = new «r.frag.name.toLowerCase.toFirstUpper»Fragment();
					«IF r.frag instanceof CustomFragment»
					Bundle args = new Bundle();
					args.putString(SectionFragment.ARG_LAYOUT, "fragment_«r.frag.name.toLowerCase»");
					fragment.setArguments(args);
					«ENDIF»
					«ENDIF»
					break;
				«ENDFOR»
				default:
					break;
				}
				getSupportFragmentManager().beginTransaction().replace(R.id.container, fragment).commit();
				return true;
			}
			
			«ENDIF»
		}
	'''
	
	def compileListFragment(ListFragment f, String pck) '''
		package «pck»;
		
		import android.os.Bundle;
		import android.support.v4.app.ListFragment;
		import android.view.View;
		import android.widget.ArrayAdapter;
		import android.widget.ListView;

		public class «f.name.toLowerCase.toFirstUpper»Fragment extends ListFragment {
			
			@Override
			public void onActivityCreated(Bundle savedInstanceState) {
				super.onActivityCreated(savedInstanceState);

				ArrayAdapter<String> adapter = new ArrayAdapter<String>(getActivity(), android.R.layout.simple_list_item_1, getResources().getStringArray(R.array.«f.entries.name.toLowerCase»));
				setListAdapter(adapter);
			}
		
			@Override
			public void onListItemClick(ListView l, View v, int position, long id) {
				
			}
		}
	'''
	
	def compileCustomFragment(CustomFragment f, String pck) '''
		package «pck»;
		
		import android.support.v4.app.Fragment;
		
		public class «f.name.toLowerCase.toFirstUpper»Fragment extends Fragment {
			
			public static final String ARG_LAYOUT = "layout";
			
			@Override
			public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
				return inflater.inflate(getResources().getIdentifier("layout/" + getArguments().getString(SectionFragment.ARG_LAYOUT), "layout", getActivity().getPackageName()), container, false);
			}
		}
	'''
	
	def compilePreferenceActivity(PreferenceActivity a) '''
		«IF a.eContainer != null»
		package «a.eContainer.eAllContents.toIterable.filter(typeof(App)).head.packageName»;
		«ENDIF»
		
		import android.app.ActionBar;
		import android.content.Intent;
		import android.os.Bundle;
		import android.preference.PreferenceActivity;
		import android.view.MenuItem;
		
		public class SettingsActivity extends PreferenceActivity {
			
			public static final String EXTRA_PARENT = "parent";
			
			@Override
			protected void onCreate(Bundle savedInstanceState) {
				super.onCreate(savedInstanceState);
				
				final ActionBar actionBar = getActionBar();
				actionBar.setDisplayHomeAsUpEnabled(true);
				
				addPreferencesFromResource(R.xml.preferences);
			}
			
			@Override
			public boolean onOptionsItemSelected(MenuItem item) {
				switch (item.getItemId()) {
					case android.R.id.home:
						Class parent = null;
						try {
							parent = Class.forName(getIntent().getStringExtra(EXTRA_PARENT));
						} catch (ClassNotFoundException e) {}
						Intent intent = new Intent(this, parent);
						intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
						startActivity(intent);
						return true;
					default:
						return super.onOptionsItemSelected(item);
				}
			}
		}
	'''
	
	def compilePreferences(EList<PreferenceCategory> categories) '''
		<PreferenceScreen xmlns:android="http://schemas.android.com/apk/res/android" >
		
			«FOR c : categories»
			<PreferenceCategory android:title="«c.title»" >
				«FOR p : c.preferences»
				«IF p instanceof CheckBoxPreference»
				«compileCheckBoxPreference(p as CheckBoxPreference)»
				«ELSEIF p instanceof EditTextPreference»
				«compileEditTextPreference(p as EditTextPreference)»
				«ELSEIF p instanceof ListPreference»
				«compileListPreference(p as ListPreference)»
				«ELSEIF p instanceof SwitchPreference»
				«compileSwitchPreference(p as SwitchPreference)»
				«ENDIF»
				«ENDFOR»
			</PreferenceCategory>
			«ENDFOR»
		
		</PreferenceScreen>
	'''
	
	def compileCheckBoxPreference(CheckBoxPreference p) '''
		<CheckBoxPreference
			android:key="«p.key»"
			android:title="«p.title»"
			«IF p.defaultValue != null»
			android:defaultValue="false"
			«ENDIF»
			«IF p.icon != null»
			android:icon="@drawable/«p.icon»"
			«ENDIF»
			«IF p.summary != null»
			android:summary="«p.summary»"
			«ELSE»
			android:summaryOn="«p.summaryOn»"
			android:summaryOff="«p.summaryOff»"
			«ENDIF» />
	'''
	
	def compileEditTextPreference(EditTextPreference p) '''
		<EditTextPreference
			android:key="«p.key»"
			android:title="«p.title»"
			«IF p.icon != null»
			android:icon="@drawable/«p.icon»"
			«ENDIF»
			«IF p.summary != null»
			android:summary="«p.summary»"
			«ENDIF» />
	'''
	
	def compileListPreference(ListPreference p) '''
		«IF p.multi != null»
		<MultiSelectListPreference
		«ELSE»
		<ListPreference
		«ENDIF»
			android:key="«p.key»"
			android:title="«p.title»"
			android:entries="@array/«p.entries.name»"
			android:entryValues="@array/«p.entries.name»_values"
			«IF p.icon != null»
			android:icon="@drawable/«p.icon»"
			«ENDIF»
			«IF p.summary != null»
			android:summary="«p.summary»"
			«ENDIF» />
	'''
	
	def compileSwitchPreference(SwitchPreference p) '''
		<SwitchPreference
			android:key="«p.key»"
			android:title="«p.title»"
			«IF p.icon != null»
			android:icon="@drawable/«p.icon»"
			«ENDIF»
			«IF p.summary != null»
			android:summary="«p.summary»"
			«ELSE»
			android:summaryOn="«p.summaryOn»"
			android:summaryOff="«p.summaryOff»"
			«ENDIF» />
	'''
	
	def compileLayout(Activity a) '''
		«IF a.navigation != null && a.navigation.elements.filter(typeof(Tab)).size > 0»
		<android.support.v4.view.ViewPager xmlns:android="http://schemas.android.com/apk/res/android"
			android:id="@+id/pager"
			android:layout_width="match_parent"
			android:layout_height="match_parent" />
		«ELSEIF a.navigation != null && a.navigation.elements.filter(typeof(Row)).size > 0»
		<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
			android:id="@+id/container"
			android:layout_width="match_parent"
			android:layout_height="match_parent" />
		«ELSEIF a.view != null»
		«a.view.compileView»
		«ENDIF»
	'''
	
	def compileView(View view) '''
		<?xml version="1.0" encoding="utf-8"?>
		<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
			android:layout_width="match_parent"
			android:layout_height="match_parent"
			android:orientation="vertical"
			android:padding="16dp" >
		
			«FOR e : view.elements»
			«IF e instanceof Button»
			«compileButton(e as Button, view.elements.indexOf(e)+1)»
			«ELSEIF e instanceof TextField»
			«compileTextField(e as TextField, view.elements.indexOf(e)+1)»
			«ELSEIF e instanceof TextView»
			«compileTextView(e as TextView, view.elements.indexOf(e)+1)»
			«ENDIF»
			«ENDFOR»
		
		</LinearLayout>
	'''
	
	def compileButton(Button button, int pos) '''
		<Button
			android:id="@+id/button«pos»"
			android:layout_width="wrap_content"
			android:layout_height="wrap_content"
			android:layout_marginBottom="8dp"
			android:text="«button.text»" />
	'''
	
	def compileTextField(TextField textField, int pos) '''
		<EditText
			android:id="@+id/editText«pos»"
			android:layout_width="match_parent"
			android:layout_height="wrap_content"
			android:layout_marginBottom="8dp"
			android:ems="10"
			android:hint="«textField.hint»"
			«IF textField.inputType.equals("emailAddress")»
			android:inputType="textEmailAddress" />
			«ELSEIF textField.inputType.equals("password")»
			android:inputType="textPassword" />
			«ENDIF»
	'''
	
	def compileTextView(TextView textView, int pos) '''
		<TextView
			android:id="@+id/textView«pos»"
			android:layout_width="wrap_content"
			android:layout_height="wrap_content"
			android:layout_marginBottom="8dp"
			android:text="«textView.text»"
			«IF textView.appearance.equals("large")»
			android:textAppearance="?android:attr/textAppearanceLarge" />
			«ELSEIF textView.appearance.equals("medium")»
			android:textAppearance="?android:attr/textAppearanceMedium" />
			«ELSEIF textView.appearance.equals("small")»
			android:textAppearance="?android:attr/textAppearanceSmall" />
			«ENDIF»
	'''
	
	def compileMenu(Menu menu) '''
		<menu xmlns:android="http://schemas.android.com/apk/res/android" >
		
			«FOR menuItem : menu.menuItems»
			<item
				android:id="@+id/menu_«menuItem.id»"
				android:title="«menuItem.title»"
				«IF menuItem.icon != null»android:icon="@drawable/«menuItem.icon»"«ENDIF»
				android:showAsAction="«menuItem.showAsAction»«IF menuItem.searchView != null»|collapseActionView«ENDIF»"
				«IF menuItem.searchView != null»android:actionViewClass="android.widget.SearchView"«ENDIF» />
			«ENDFOR»
		
		</menu>
	'''
	
	def compileArrays(Iterable<Entries> list) '''
		<?xml version="1.0" encoding="utf-8"?>
		<resources>
			«FOR e : list»
			«compileEntries(e)»
			«compileEntryValues(e)»
			«ENDFOR»
		</resources>
	'''
	
	def compileEntries(Entries e) '''
		<string-array name="«e.name»">
			«FOR i : e.items»
			<item>«i.label»</item>
			«ENDFOR»
		</string-array>
	'''
	
	def compileEntryValues(Entries e) '''
		<string-array name="«e.name»_values">
			«FOR i : e.items»
			<item>«i.value»</item>
			«ENDFOR»
		</string-array>
	'''
}